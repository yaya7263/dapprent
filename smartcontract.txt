pragma solidity >=0.4.22 <0.6.0;

//status represents rented, not rented, processing, etc. 
//location,rentee, price, start date, end date company
contract Homeaway { 
    
    address owner;
    Rental[] public rentals;
    mapping (bytes32 => uint) public indexes; // this will be the index of the address
    event transactionResult (bool transaction);
    bytes32[] public companies;
    
    uint public transactions; 
    
    struct Rental {
        uint status;
        bytes32 location;
        bytes32 rentee; 
        uint price;
        uint start;
        uint end;
        bytes32 company; 
    }
    
    constructor() public{
        owner = msg.sender;
        transactions = 0; 
    }
    
    
    function addCompany(bytes32 _company) public payable {
        companies.push(_company);
    }
    
    function retCompanies() public view returns(bytes32[] memory) {
        return companies; 
    }
    function rentProperty(uint _status, bytes32 _location, bytes32 _rentee, uint _price, uint _start, uint _end, bytes32 _company) public payable {
        transactions++; 
        uint currentIndex = rentals.length; 
        indexes[_location] = currentIndex; // so for first location, it will be recorded at index 0. 
        rentals.push(Rental(_status, _location, _rentee, _price, _start, _end, _company));
    }
    
    //get recent rentals from the last time they retrieved rentals until now. _index represents the FIRST transaction they need, rather than last transaction received. 
    function getRecentRentals(uint _index) public view returns (uint[] memory, bytes32[] memory, bytes32[] memory, uint[] memory, uint[] memory, uint[] memory) {
        uint length = rentals.length - _index; // this would give us the amount of rents we need to returns
        uint[] memory status = new uint[](length);
        bytes32[] memory location = new bytes32[](length);
        bytes32[] memory company = new bytes32[](length);
        uint[] memory price = new uint[](length);
        uint[] memory start = new uint[](length);
        uint[] memory end = new uint[](length);
        
        uint returnIndex = 0; 
        for (uint i = _index; i < rentals.length; i++ ){
            status[returnIndex] = rentals[i].status;
            location[returnIndex] = rentals[i].location;
            company[returnIndex] = rentals[i].company;
            price[returnIndex] = rentals[i].price;
            start[returnIndex] = rentals[i].start;
            end[returnIndex] = rentals[i].end;
            returnIndex++; 
        }
        return(status, location, company, price, start, end); 
    }
    
    //delete property from array 
    function deleteRental(bytes32 _location) public payable{
        uint index = indexes[_location]; 
        delete rentals[index]; 
    }
    
    function deleteRentals () public payable {
        delete rentals; 
    }
}